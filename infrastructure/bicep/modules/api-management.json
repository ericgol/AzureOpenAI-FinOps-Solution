{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.38.33.27573",
      "templateHash": "6366958400230546674"
    }
  },
  "parameters": {
    "apimName": {
      "type": "string",
      "metadata": {
        "description": "API Management service name"
      }
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "Location for API Management"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Resource tags"
      }
    },
    "sku": {
      "type": "string",
      "defaultValue": "Developer",
      "allowedValues": [
        "Developer",
        "Premium"
      ],
      "metadata": {
        "description": "APIM SKU"
      }
    },
    "logAnalyticsWorkspaceId": {
      "type": "string",
      "metadata": {
        "description": "Log Analytics workspace ID"
      }
    },
    "appInsightsInstrumentationKey": {
      "type": "string",
      "metadata": {
        "description": "Application Insights instrumentation key"
      }
    },
    "subnetId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Subnet ID for private networking"
      }
    },
    "enablePrivateNetworking": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable private networking"
      }
    },
    "publisherEmail": {
      "type": "string",
      "defaultValue": "admin@contoso.com",
      "metadata": {
        "description": "Publisher email"
      }
    },
    "publisherName": {
      "type": "string",
      "defaultValue": "FinOps Admin",
      "metadata": {
        "description": "Publisher name"
      }
    }
  },
  "resources": {
    "apiManagement": {
      "type": "Microsoft.ApiManagement/service",
      "apiVersion": "2023-05-01-preview",
      "name": "[parameters('apimName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "sku": {
        "name": "[parameters('sku')]",
        "capacity": 1
      },
      "properties": {
        "publisherEmail": "[parameters('publisherEmail')]",
        "publisherName": "[parameters('publisherName')]",
        "virtualNetworkConfiguration": "[if(parameters('enablePrivateNetworking'), createObject('subnetResourceId', parameters('subnetId')), null())]",
        "virtualNetworkType": "[if(parameters('enablePrivateNetworking'), 'Internal', 'None')]"
      },
      "identity": {
        "type": "SystemAssigned"
      }
    },
    "appInsightsLogger": {
      "type": "Microsoft.ApiManagement/service/loggers",
      "apiVersion": "2023-05-01-preview",
      "name": "[format('{0}/{1}', parameters('apimName'), 'applicationinsights')]",
      "properties": {
        "loggerType": "applicationInsights",
        "credentials": {
          "instrumentationKey": "[parameters('appInsightsInstrumentationKey')]"
        },
        "isBuffered": true,
        "resourceId": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, split(parameters('appInsightsInstrumentationKey'), '/')[8])]"
      },
      "dependsOn": [
        "apiManagement"
      ]
    },
    "diagnosticSettings": {
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.ApiManagement/service/{0}', parameters('apimName'))]",
      "name": "finops-diagnostics",
      "properties": {
        "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
        "logs": [
          {
            "categoryGroup": "allLogs",
            "enabled": true,
            "retentionPolicy": {
              "enabled": false,
              "days": 0
            }
          }
        ],
        "metrics": [
          {
            "category": "AllMetrics",
            "enabled": true,
            "retentionPolicy": {
              "enabled": false,
              "days": 0
            }
          }
        ]
      },
      "dependsOn": [
        "apiManagement"
      ]
    },
    "logAnalyticsWorkspaceIdNamedValue": {
      "type": "Microsoft.ApiManagement/service/namedValues",
      "apiVersion": "2023-05-01-preview",
      "name": "[format('{0}/{1}', parameters('apimName'), 'log-analytics-workspace-id')]",
      "properties": {
        "displayName": "LogAnalyticsWorkspaceID",
        "value": "[parameters('logAnalyticsWorkspaceId')]",
        "secret": false
      },
      "dependsOn": [
        "apiManagement"
      ]
    },
    "openAiProduct": {
      "type": "Microsoft.ApiManagement/service/products",
      "apiVersion": "2023-05-01-preview",
      "name": "[format('{0}/{1}', parameters('apimName'), 'openai-finops')]",
      "properties": {
        "displayName": "OpenAI FinOps APIs",
        "description": "Azure OpenAI APIs with FinOps telemetry collection",
        "subscriptionRequired": true,
        "approvalRequired": false,
        "state": "published"
      },
      "dependsOn": [
        "apiManagement"
      ]
    },
    "openAiApi": {
      "type": "Microsoft.ApiManagement/service/apis",
      "apiVersion": "2023-05-01-preview",
      "name": "[format('{0}/{1}', parameters('apimName'), 'openai-api')]",
      "properties": {
        "displayName": "OpenAI API",
        "description": "Azure OpenAI Service API with FinOps tracking",
        "serviceUrl": "https://your-openai-service.openai.azure.com",
        "path": "openai",
        "protocols": [
          "https"
        ],
        "subscriptionKeyParameterNames": {
          "header": "api-key",
          "query": "api-key"
        }
      },
      "dependsOn": [
        "apiManagement"
      ]
    },
    "productApi": {
      "type": "Microsoft.ApiManagement/service/products/apis",
      "apiVersion": "2023-05-01-preview",
      "name": "[format('{0}/{1}/{2}', parameters('apimName'), 'openai-finops', 'openai-api')]",
      "dependsOn": [
        "openAiApi",
        "openAiProduct"
      ]
    },
    "chatCompletionsOperation": {
      "type": "Microsoft.ApiManagement/service/apis/operations",
      "apiVersion": "2023-05-01-preview",
      "name": "[format('{0}/{1}/{2}', parameters('apimName'), 'openai-api', 'chat-completions')]",
      "properties": {
        "displayName": "Chat Completions",
        "method": "POST",
        "urlTemplate": "/deployments/{deployment-id}/chat/completions",
        "templateParameters": [
          {
            "name": "deployment-id",
            "type": "string",
            "required": true,
            "description": "Deployment ID of the model"
          }
        ],
        "description": "Creates a model response for the given chat conversation",
        "request": {
          "queryParameters": [
            {
              "name": "api-version",
              "type": "string",
              "required": true,
              "defaultValue": "2024-02-01"
            }
          ],
          "headers": [
            {
              "name": "Content-Type",
              "type": "string",
              "defaultValue": "application/json",
              "required": true
            },
            {
              "name": "device-id",
              "type": "string",
              "required": false,
              "description": "Custom user identifier for cost allocation"
            },
            {
              "name": "store-number",
              "type": "string",
              "required": false,
              "description": "Store identifier for cost allocation"
            }
          ]
        },
        "responses": [
          {
            "statusCode": 200,
            "description": "OK",
            "representations": [
              {
                "contentType": "application/json"
              }
            ]
          }
        ]
      },
      "dependsOn": [
        "openAiApi"
      ]
    },
    "finOpsTelemetryPolicy": {
      "type": "Microsoft.ApiManagement/service/apis/policies",
      "apiVersion": "2023-05-01-preview",
      "name": "[format('{0}/{1}/{2}', parameters('apimName'), 'openai-api', 'policy')]",
      "properties": {
        "value": "<policies>\n  <inbound>\n    <base />\n    <set-variable name=\"device-id\" value=\"@(context.Request.Headers.GetValueOrDefault(\"device-id\", \"unknown\"))\" />\n    <set-variable name=\"store-number\" value=\"@(context.Request.Headers.GetValueOrDefault(\"store-number\", \"unknown\"))\" />\n    <set-variable name=\"request-timestamp\" value=\"@(DateTime.UtcNow)\" />\n    <set-variable name=\"request-id\" value=\"@(Guid.NewGuid())\" />\n  </inbound>\n  <backend>\n    <base />\n  </backend>\n  <outbound>\n    <base />\n    <log-to-eventhub logger-id=\"applicationinsights\">\n      @{\n        var deviceId = (string)context.Variables[\"device-id\"];\n        var storeNumber = (string)context.Variables[\"store-number\"];\n        var requestTimestamp = (DateTime)context.Variables[\"request-timestamp\"];\n        var requestId = (string)context.Variables[\"request-id\"];\n        var responseTime = (int)(DateTime.UtcNow - requestTimestamp).TotalMilliseconds;\n        \n        // Extract token usage from response if available\n        var tokensUsed = 0;\n        if (context.Response.StatusCode == 200) {\n          try {\n            var responseBody = context.Response.Body?.As<JObject>();\n            if (responseBody != null && responseBody[\"usage\"] != null) {\n              tokensUsed = (int)responseBody[\"usage\"][\"total_tokens\"];\n            }\n          }\n          catch { }\n        }\n        \n        return new JObject(\n          new JProperty(\"timestamp\", requestTimestamp),\n          new JProperty(\"requestId\", requestId),\n          new JProperty(\"deviceId\", deviceId),\n          new JProperty(\"storeNumber\", storeNumber),\n          new JProperty(\"apiName\", context.Api.Name),\n          new JProperty(\"operationName\", context.Operation.Name),\n          new JProperty(\"method\", context.Request.Method),\n          new JProperty(\"url\", context.Request.Url.ToString()),\n          new JProperty(\"statusCode\", context.Response.StatusCode),\n          new JProperty(\"responseTime\", responseTime),\n          new JProperty(\"tokensUsed\", tokensUsed),\n          new JProperty(\"subscriptionId\", context.Subscription?.Id ?? \"\"),\n          new JProperty(\"productId\", context.Product?.Id ?? \"\"),\n          new JProperty(\"resourceId\", \"{{log-analytics-workspace-id}}\")\n        ).ToString();\n      }\n    </log-to-eventhub>\n  </outbound>\n  <on-error>\n    <base />\n    <log-to-eventhub logger-id=\"applicationinsights\">\n      @{\n        var deviceId = (string)context.Variables[\"device-id\"];\n        var storeNumber = (string)context.Variables[\"store-number\"];\n        var requestTimestamp = (DateTime)context.Variables[\"request-timestamp\"];\n        var requestId = (string)context.Variables[\"request-id\"];\n        var responseTime = (int)(DateTime.UtcNow - requestTimestamp).TotalMilliseconds;\n        \n        return new JObject(\n          new JProperty(\"timestamp\", requestTimestamp),\n          new JProperty(\"requestId\", requestId),\n          new JProperty(\"deviceId\", deviceId),\n          new JProperty(\"storeNumber\", storeNumber),\n          new JProperty(\"apiName\", context.Api.Name),\n          new JProperty(\"operationName\", context.Operation.Name),\n          new JProperty(\"method\", context.Request.Method),\n          new JProperty(\"url\", context.Request.Url.ToString()),\n          new JProperty(\"statusCode\", context.Response?.StatusCode ?? 500),\n          new JProperty(\"responseTime\", responseTime),\n          new JProperty(\"tokensUsed\", 0),\n          new JProperty(\"error\", context.LastError?.Message ?? \"Unknown error\"),\n          new JProperty(\"subscriptionId\", context.Subscription?.Id ?? \"\"),\n          new JProperty(\"productId\", context.Product?.Id ?? \"\"),\n          new JProperty(\"resourceId\", \"{{log-analytics-workspace-id}}\")\n        ).ToString();\n      }\n    </log-to-eventhub>\n  </on-error>\n</policies>\n"
      },
      "dependsOn": [
        "openAiApi"
      ]
    },
    "testSubscription": {
      "type": "Microsoft.ApiManagement/service/subscriptions",
      "apiVersion": "2023-05-01-preview",
      "name": "[format('{0}/{1}', parameters('apimName'), 'test-subscription')]",
      "properties": {
        "displayName": "Test Subscription",
        "state": "active",
        "scope": "[format('/products/{0}', resourceId('Microsoft.ApiManagement/service/products', parameters('apimName'), 'openai-finops'))]"
      },
      "dependsOn": [
        "apiManagement",
        "openAiProduct"
      ]
    }
  },
  "outputs": {
    "apimName": {
      "type": "string",
      "value": "[parameters('apimName')]"
    },
    "apimId": {
      "type": "string",
      "value": "[resourceId('Microsoft.ApiManagement/service', parameters('apimName'))]"
    },
    "gatewayUrl": {
      "type": "string",
      "value": "[reference('apiManagement').gatewayUrl]"
    },
    "managementApiUrl": {
      "type": "string",
      "value": "[reference('apiManagement').managementApiUrl]"
    },
    "principalId": {
      "type": "string",
      "value": "[reference('apiManagement', '2023-05-01-preview', 'full').identity.principalId]"
    },
    "testSubscriptionKey": {
      "type": "securestring",
      "value": "[listSecrets('testSubscription', '2023-05-01-preview').primaryKey]"
    }
  }
}